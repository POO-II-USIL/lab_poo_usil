package com.usil.hampcode.view;

import com.usil.hampcode.controller.AutorController;
import com.usil.hampcode.controller.LibroController;
import com.usil.hampcode.model.Autor;
import com.usil.hampcode.model.Libro;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class FrmBuscarLibro extends javax.swing.JFrame {

    private LibroController libroController;
    private AutorController autorController; 
    
    public FrmBuscarLibro() {
        initComponents();
        libroController= new LibroController();
        autorController = new AutorController();
        configurarTabla();
        cargarLibrosEnTabla();
        cargarAutoresEnComboBox();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtIsbn = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtTitulo = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        cboAutor = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblLibros = new javax.swing.JTable();
        btnBuscar = new javax.swing.JButton();
        btnTodos = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("ISBN:");

        jLabel2.setText("Titulo");

        jLabel3.setText("Autor");

        tblLibros.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblLibros);

        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        btnTodos.setText("Todos");
        btnTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTodosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 32, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 659, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnBuscar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnTodos))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtIsbn, javax.swing.GroupLayout.DEFAULT_SIZE, 522, Short.MAX_VALUE)
                            .addComponent(txtTitulo)
                            .addComponent(cboAutor, javax.swing.GroupLayout.PREFERRED_SIZE, 513, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtIsbn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(cboAutor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBuscar)
                    .addComponent(btnTodos))
                .addGap(14, 14, 14)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        
        String autor = cboAutor.getSelectedItem().toString();
         System.out.println("Autor seleccionado: " + autor);  // Verificar el autor seleccionado
        buscarLibrosAutor(autor);  // Buscar según el criterio ingresado
        
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTodosActionPerformed
        cargarLibrosEnTabla();
    }//GEN-LAST:event_btnTodosActionPerformed

    // Método para configurar la tabla (columnas y modelo)
    private void configurarTabla() {
        DefaultTableModel model = new DefaultTableModel();
        model.setColumnIdentifiers(new String[]{"ISBN", "Título", "Género", "Sinopsis", "Leído", "Lo Tengo", "Autor"});

        tblLibros.setModel(model);  // Establecer el modelo en la tabla
    }
    
    // Método para buscar libros según el ISBN, Título o Autor
    private void buscarLibrosAutor(String autor) {
        DefaultTableModel model = (DefaultTableModel) tblLibros.getModel();
        model.setRowCount(0);  // Limpiar la tabla antes de cargar los resultados

        try {
            List<Libro> libros = libroController.buscarLibroPorAutor(autor);  // Si se ingresó Autor, buscar por Autor
             System.out.println("Cantidad de libros encontrados por autor: " + libros.size());

         
            for (Libro libro : libros) {
                Object[] fila = {
                    libro.getIsbn(),
                    libro.getTitulo(),
                    libro.getGenero(),
                    libro.getSinopsis(),
                    libro.isLeido() ? "Sí" : "No",
                    libro.isLoTengo() ? "Sí" : "No",
                    libro.getAutor().getNombre()
                };
                model.addRow(fila);  // Agregar cada libro como fila en la tabla
            }

            if (libros.isEmpty()) {
                JOptionPane.showMessageDialog(this, "No se encontraron libros con los criterios proporcionados.", "Información", JOptionPane.INFORMATION_MESSAGE);
            }

        } catch (IOException e) {
           
            JOptionPane.showMessageDialog(this, "Error al buscar los libros.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    
    // Método para cargar los libros en el JTable (carga inicial)
    private void cargarLibrosEnTabla() {
        DefaultTableModel model = (DefaultTableModel) tblLibros.getModel();
        model.setRowCount(0);  // Limpiar la tabla antes de cargar

        try {
            List<Libro> libros = libroController.listarLibros();  // Obtener todos los libros desde el controlador
               System.out.println("Cantidad de libros encontrados por autor: " + libros.size());
               
            for (Libro libro : libros) {
                Object[] fila = {
                    libro.getIsbn(),
                    libro.getTitulo(),
                    libro.getGenero(),
                    libro.getSinopsis(),
                    libro.isLeido() ? "Sí" : "No",
                    libro.isLoTengo() ? "Sí" : "No",
                    libro.getAutor().getNombre()
                };
                model.addRow(fila);  // Agregar cada libro como fila en la tabla
            }

        } catch (IOException e) {
           
            JOptionPane.showMessageDialog(this, "Error al cargar los libros.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void cargarAutoresEnComboBox() {
        try {
            List<Autor> autores = autorController.listarAutores();  // Obtener autores desde AutorController
            DefaultComboBoxModel<String> modelo = new DefaultComboBoxModel<>();
            for (Autor autor : autores) {
                modelo.addElement(autor.getNombre());  // Agregar el nombre del autor al modelo del ComboBox
            }
            cboAutor.setModel(modelo);  // Establecer el modelo en el JComboBox
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al cargar autores.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmBuscarLibro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmBuscarLibro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmBuscarLibro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmBuscarLibro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmBuscarLibro().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnTodos;
    private javax.swing.JComboBox<String> cboAutor;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblLibros;
    private javax.swing.JTextField txtIsbn;
    private javax.swing.JTextField txtTitulo;
    // End of variables declaration//GEN-END:variables
}
